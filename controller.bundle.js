"use strict";(self.webpackChunkbattleshipsjs=self.webpackChunkbattleshipsjs||[]).push([[204,692,886],{426:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([e.id,".board {\n  display: flex;\n  flex-wrap: wrap;\n  width: 45%;\n  height: 100%;\n}\nbody,\nhtml {\n  width: 100%;\n  height: 100%;\n}\n* {\n  margin: 0;\n  padding: 0;\n}\nh1 {\n  text-align: center;\n}\n.container {\n  width: 100%;\n  height: 80%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.grid {\n  box-sizing: border-box;\n  border: 1px solid black;\n  width: 10%;\n  height: 10%;\n}\n.grid:hover {\n  border: 5px solid purple;\n  cursor: crosshair;\n}\n.text {\n  text-align: center;\n  margin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,eAAe;EACf,UAAU;EACV,YAAY;AACd;AACA;;EAEE,WAAW;EACX,YAAY;AACd;AACA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;AACA;EACE,sBAAsB;EACtB,uBAAuB;EACvB,UAAU;EACV,WAAW;AACb;AACA;EACE,wBAAwB;EACxB,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,cAAc;AAChB",sourcesContent:[".board {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 45%;\r\n  height: 100%;\r\n}\r\nbody,\r\nhtml {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nh1 {\r\n  text-align: center;\r\n}\r\n.container {\r\n  width: 100%;\r\n  height: 80%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.grid {\r\n  box-sizing: border-box;\r\n  border: 1px solid black;\r\n  width: 10%;\r\n  height: 10%;\r\n}\r\n.grid:hover {\r\n  border: 5px solid purple;\r\n  cursor: crosshair;\r\n}\r\n.text {\r\n  text-align: center;\r\n  margin: 0 auto;\r\n}\r\n"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var h=0;h<e.length;h++){var l=[].concat(e[h]);r&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],a=0;a<e.length;a++){var c=e[a],h=r.base?c[0]+r.base:c[0],l=o[h]||0,d="".concat(h," ").concat(l);o[h]=l+1;var u=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=i(p,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var a=n(o[s]);t[a].references--}for(var c=r(e,i),h=0;h<o.length;h++){var l=n(o[h]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},356:(e,t,n)=>{var r=n(386),i=n(214);const o=document.querySelector("#placement"),s=document.querySelector("#confirmBtn"),a=document.querySelector("dialog");o.addEventListener("click",(()=>{o.textContent="h"===o.textContent?"v":"h"})),s.addEventListener("click",(e=>{e.preventDefault(),a.close(s.value)}));const c=new class{constructor(){this.p1=new i.J5("bakr",document.querySelector(".player")),this.p2=new i.J5("ziad",document.querySelector(".enemy"),!0),this.current=this.p1,this.next=this.p2,this.ships=[{name:"Cruiser",id:1,length:5},{name:"Battleship",id:2,length:4},{name:"Carrier",id:3,length:3},{name:"Submarine",id:4,length:2},{name:"Destroyer",id:5,length:2}]}async placementLoop(){let e=document.querySelector("#placement");this.current.board.board=[];for(let e=0;e<this.current.board.size;e++)this.current.board.board[e]=[0,0,0,0,0,0,0,0,0,0];for(let t=0;t<5;t++){(0,r.vd)(this.current.name);const n=this.ships.find((e=>e.id===t+1));let i,o;(0,r.Nv)(`Place your ${n.name}`),(0,r.o3)(this.current),(0,r.f7)(this.next);do{o=await this.addListener(this.current),i=this.current.board.checkShipPlacement(o.x,o.y,e.textContent,n),this.removeListener(this.current)}while(!i);this.current.board.placeShip(o.x,o.y,e.textContent,n),(0,r.o3)(this.current)}this.switchTurn(this.current,this.next)}isGameOver(){return!!this.next.board.fleetSunk()}addListener(e){return new Promise((t=>{const n=e.UI.children,r=e.board.size;for(let e=0;e<n.length;e++)n[e].addEventListener("click",(()=>{t({x:Math.floor(e/r),y:e%r})}))}))}removeListener(e){const t=e.UI.children;for(let e=0;e<t.length;e++){let n=t[e],r=n.cloneNode(!0);n.parentNode.replaceChild(r,n)}}async gameLoop(){for(;;){(0,r.vd)(this.current.name),(0,r.o3)(this.current),(0,r.f7)(this.next);const e=await this.addListener(this.next),t=this.current.attack(this.next,e.x,e.y),n=-1===t?"already hit":0===t?"miss":"hit";if((0,r.Nv)(`${this.current.name} attacks ${this.next.name} at (${e.x}, ${e.y}) with ${n} `),-1!==t){if(1===t&&this.isGameOver())break;this.switchTurn(this.next,this.current)}}(0,r.o3)(this.p1),(0,r.o3)(this.p2),this.removeListener(this.p1),this.removeListener(this.p2),(0,r.je)(this.current.name)}switchTurn(e,t){this.removeListener(e),this.addListener(t);let n=this.current;this.current=this.next,this.next=n}};c.placementLoop().then((()=>c.placementLoop())).then((()=>c.gameLoop()))},214:(e,t,n)=>{n.d(t,{J5:()=>o});class r{constructor(e,t){this.id=e,this.length=t,this.hits=0}hit(){this.hits++}isSunk(){return this.length-this.hits==0}}class i{constructor(e){this.board=[];for(let t=0;t<e;t++)this.board[t]=[0,0,0,0,0,0,0,0,0,0];this.fleet=[],this.size=e}placeShip(e,t,n,i){const o=new r(i.id,i.length);if("h"===n)for(let n=t;n<t+o.length;n++)this.board[e][n]=o.id;else for(let n=e;n<e+o.length;n++)this.board[n][t]=o.id;return this.fleet.push(o),!0}checkShipPlacement(e,t,n="h",r){if("h"===n){if(t+r.length>=this.size)return!1;if("v"===n&&e+r.length>=this.size)return!1}if("h"===n){for(let n=t;n<t+r.length;n++)if(0!==this.board[e][n])return!1;return!0}for(let n=e;n<e+r.length;n++)if(0!==this.board[n][t])return!1;return!0}receiveAttack(e,t){return 0===this.board[e][t]?0:-1===this.board[e][t]?-1:(this.fleet.find((n=>n.id===this.board[e][t])).hit(),this.board[e][t]=-1,1)}fleetSunk(){return this.fleet.every((e=>e.isSunk()))}}class o{constructor(e,t,n=!1){this.name=e,this.board=new i(10),this.ai=n,this.UI=t}attack(e,t,n){return e.board.receiveAttack(t,n)}}},386:(e,t,n)=>{n.d(t,{f7:()=>v,o3:()=>b,Nv:()=>g,vd:()=>y,je:()=>C});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),c=n.n(a),h=n(565),l=n.n(h),d=n(216),u=n.n(d),p=n(589),f=n.n(p),A=n(426),m={};m.styleTagTransform=f(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),i()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals,document.querySelectorAll(".board").forEach((e=>{for(let t=0;t<10;t++)for(let t=0;t<10;t++){const t=document.createElement("div");t.classList.add("grid"),e.appendChild(t)}}));const b=e=>{const t=e.board.board,n=e.UI.querySelectorAll(".grid"),r=t.length;for(let e=0;e<r;e++)for(let i=0;i<r;i++){const o=n[i+e*r];0===t[e][i]?o.style.backgroundColor="blue":-1===t[e][i]?o.style.backgroundColor="red":o.style.backgroundColor="green"}},g=e=>{document.querySelector("#stat").textContent=e},v=e=>{const t=e.UI.children,n=e.board.board.length;for(let r=0;r<t.length;r++){let i=Math.floor(r/n),o=r%n;-1===e.board.board[i][o]?t[r].style.backgroundColor="red":t[r].style.backgroundColor="grey"}},y=e=>{document.querySelector("#turn").textContent=`${e}'s turn`},C=e=>{document.querySelector("#winner").textContent=`${e} wins!`}}},e=>{e(e.s=356)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,